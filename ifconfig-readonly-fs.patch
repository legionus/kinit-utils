--- kinit/ipconfig/main.c.fix4	2010-01-08 00:25:20 +0300
+++ kinit/ipconfig/main.c	2010-01-08 00:27:53 +0300
@@ -29,8 +29,9 @@ static char do_not_config;
 static unsigned int default_caps = CAP_DHCP | CAP_BOOTP | CAP_RARP;
 static int loop_timeout = -1;
 static int configured;
 static int bringup_first = 0;
+static int do_readonly = 0;
 
 /* DHCP vendor class identifier */
 char vendor_class_identifier[260];
 int vendor_class_identifier_len;
@@ -100,8 +101,11 @@ static void dump_device_config(struct ne
 {
 	char fn[40];
 	FILE *f;
 
+	if (do_readonly)
+		return;
+
 	snprintf(fn, sizeof(fn), "/tmp/net-%s.conf", dev->name);
 	f = fopen(fn, "w");
 	if (f) {
 		fprintf(f, "DEVICE=%s\n", dev->name);
@@ -726,9 +730,9 @@ int ipconfig_main(int argc, char *argv[]
 	/* Default vendor identifier */
 	set_vendor_identifier("Linux ipconfig");
 
 	do {
-		c = getopt(argc, argv, "c:d:i:onp:t:");
+		c = getopt(argc, argv, "c:d:i:onp:rt:");
 		if (c == EOF)
 			break;
 
 		switch (c) {
@@ -763,8 +767,11 @@ int ipconfig_main(int argc, char *argv[]
 			break;
 		case 'n':
 			do_not_config = 1;
 			break;
+		case 'r':
+			do_readonly = 1;
+			break;
 		case 'd':
 			dev = add_device(optarg);
 			if (dev)
 				bringup_device(dev);
--- kinit/ipconfig/README.fix4	2010-01-08 00:25:20 +0300
+++ kinit/ipconfig/README	2010-01-08 00:25:20 +0300
@@ -3,17 +3,18 @@ BOOTP/DHCP client for klibc
 
 Usage:
 
 ipconfig [-c proto] [-d interface] [-i identifier]
-	 [-n] [-p port] [-t timeout] [interface ...]
+	 [-n] [-r] [-p port] [-t timeout] [interface ...]
 
 -c proto	Use PROTO as the configuration protocol for all
 		interfaces, unless overridden by specific interfaces.
 -d interface	Either the name of an interface, or a long spec.
 -i identifier	DHCP vendor class identifier.  The default is
 		"Linux ipconfig".
 -n		Do nothing - just print the configuration that would
 		be performed.
+-r		Do not use filesystem.
 -p port		Send bootp/dhcp broadcasts from PORT, to PORT - 1.
 -t timeout	Give up on all unconfigured interfaces after TIMEOUT secs.
 
 You can configure multiple interfaces by passing multiple interface
